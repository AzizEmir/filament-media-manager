<?php

namespace TomatoPHP\FilamentMediaManager\Resources\MediaResource\Pages;

use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Grid;
use Filament\Forms;
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\ManageRecords;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use TomatoPHP\FilamentIcons\Components\IconPicker;
use TomatoPHP\FilamentMediaManager\Models\Folder;
use TomatoPHP\FilamentMediaManager\Models\Media;
use TomatoPHP\FilamentMediaManager\Resources\MediaResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListMedia extends ManageRecords
{
    protected static string $resource = MediaResource::class;

    public ?int $folder_id = null;
    public ?Folder $folder = null;


    public function getTitle(): string|Htmlable
    {
        return $this->folder->name; // TODO: Change the autogenerated stub
    }

    public function mount(): void
    {
        parent::mount(); // TODO: Change the autogenerated stub


        if(!request()->has('folder_id')){
            abort(404, 'Folder ID is required');
        }

        $folder = Folder::find(request()->get('folder_id'));
        if(!$folder){
            abort(404, 'Folder ID is required');
        }
        else {
            if($folder->is_protected && !session()->has('folder_password')){
                abort(403, 'You Cannot Access This Folder');
            }
        }

        $this->folder = $folder;
        $this->folder_id = request()->get('folder_id');
        session()->put('folder_id', $this->folder_id);
    }

    protected function getHeaderActions(): array
    {
        $folder_id = $this->folder_id;
        $form = config('filament-media-manager.model.folder')::find($folder_id)?->toArray();
        return [
            Actions\Action::make('create_sub_folder')
                ->hidden(fn()=> !filament('filament-media-manager')->allowSubFolders)
                ->mountUsing(function () use ($folder_id){
                    session()->put('folder_id', $folder_id);
                })
                ->color('info')
                ->label(trans('filament-media-manager::messages.media.actions.sub_folder.label'))
                ->icon('heroicon-o-folder-minus')
                ->form([
                    Forms\Components\TextInput::make('name')
                        ->label(trans('filament-media-manager::messages.folders.columns.name'))
                        ->columnSpanFull()
                        ->lazy()
                        ->afterStateUpdated(function (Forms\Set $set, Forms\Get $get) {
                            $set('collection', Str::slug($get('name')));
                        })
                        ->required()
                        ->maxLength(255),
                    Forms\Components\TextInput::make('collection')
                        ->label(trans('filament-media-manager::messages.folders.columns.collection'))
                        ->columnSpanFull()
                        ->unique(Folder::class)
                        ->required()
                        ->maxLength(255),
                    Forms\Components\Textarea::make('description')
                        ->label(trans('filament-media-manager::messages.folders.columns.description'))
                        ->columnSpanFull()
                        ->maxLength(255),
                    IconPicker::make('icon')
                        ->label(trans('filament-media-manager::messages.folders.columns.icon')),
                    Forms\Components\ColorPicker::make('color')
                        ->label(trans('filament-media-manager::messages.folders.columns.color')),
                    Forms\Components\Toggle::make('is_protected')
                        ->label(trans('filament-media-manager::messages.folders.columns.is_protected'))
                        ->live()
                        ->columnSpanFull(),
                    Forms\Components\TextInput::make('password')
                        ->label(trans('filament-media-manager::messages.folders.columns.password'))
                        ->hidden(fn(Forms\Get $get) => !$get('is_protected'))
                        ->password()
                        ->revealable()
                        ->required()
                        ->maxLength(255),
                    Forms\Components\TextInput::make('password_confirmation')
                        ->label(trans('filament-media-manager::messages.folders.columns.password_confirmation'))
                        ->hidden(fn(Forms\Get $get) => !$get('is_protected'))
                        ->password()
                        ->required()
                        ->revealable()
                        ->maxLength(255)
                ])
                ->action(function (array $data) use ($folder_id) {
                    $folder = Folder::find($folder_id);
                    if($folder){
                        $data['model_id'] = $folder_id;
                        $data['model_type'] = Folder::class;
                        Folder::query()->create($data);
                    }

                    Notification::make()
                        ->title('Folder Created')
                        ->body('Folder Created Successfully')
                        ->success()
                        ->send();
                }),
            Actions\Action::make('create_media')
                ->mountUsing(function () use ($folder_id){
                    session()->put('folder_id', $folder_id);
                })
                ->label(trans('filament-media-manager::messages.media.actions.create.label'))
                ->icon('heroicon-o-plus')
                ->form([
                    Forms\Components\FileUpload::make('file')
                        ->label(trans('filament-media-manager::messages.media.actions.create.form.file'))
                        ->maxSize('100000')
                        ->columnSpanFull()
                        ->required()
                        ->storeFiles(false),
                    Forms\Components\TextInput::make('title')
                        ->label(trans('filament-media-manager::messages.media.actions.create.form.title'))
                        ->columnSpanFull(),
                    Forms\Components\Textarea::make('description')
                        ->label(trans('filament-media-manager::messages.media.actions.create.form.description'))
                        ->columnSpanFull(),
                ])
                ->action(function (array $data) use ($folder_id) {
                    $folder = Folder::find($folder_id);
                    if($folder){
                        if($folder->model){
                            $folder->model->addMedia($data['file'])
                                ->withCustomProperties([
                                    'title' => $data['title'],
                                    'description' => $data['description']
                                ])
                                ->toMediaCollection($folder->collection);
                        }
                        else {
                            $folder->addMedia($data['file'])
                                ->withCustomProperties([
                                    'title' => $data['title'],
                                    'description' => $data['description']
                                ])
                                ->toMediaCollection($folder->collection);
                        }

                    }

                    Notification::make()->title(trans('filament-media-manager::messages.media.notificaitons.create-media'))->send();
                }),
            Actions\Action::make('delete_folder')
                ->mountUsing(function () use ($folder_id){
                    session()->put('folder_id', $folder_id);
                })
                ->requiresConfirmation()
                ->label(trans('filament-media-manager::messages.media.actions.delete.label'))
                ->icon('heroicon-o-trash')
                ->color('danger')
                ->action(function () use ($folder_id){
                    $folder = config('filament-media-manager.model.folder')::find($folder_id);
                    $folder->delete();
                    session()->forget('folder_id');

                    Notification::make()->title(trans('filament-media-manager::messages.media.notificaitons.delete-folder'))->send();
                    return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.folders.index');
                }),
            Actions\Action::make('edit_current_folder')
                ->mountUsing(function () use ($folder_id){
                    session()->put('folder_id', $folder_id);
                })
                ->label(trans('filament-media-manager::messages.media.actions.edit.label'))
                ->icon('heroicon-o-pencil-square')
                ->color('warning')
                ->form(function (){
                    return [
                       Grid::make([
                           "sm" => 1,
                           "md" => 2
                       ])
                            ->schema([
                                Forms\Components\TextInput::make('name')
                                    ->label(trans('filament-media-manager::messages.folders.columns.name'))
                                    ->columnSpanFull()
                                    ->required()
                                    ->maxLength(255),
                                Forms\Components\Textarea::make('description')
                                    ->label(trans('filament-media-manager::messages.folders.columns.description'))
                                    ->columnSpanFull()
                                    ->maxLength(255),
                                IconPicker::make('icon')
                                    ->label(trans('filament-media-manager::messages.folders.columns.icon')),
                                Forms\Components\ColorPicker::make('color')
                                    ->label(trans('filament-media-manager::messages.folders.columns.color')),
                                Forms\Components\Toggle::make('is_protected')
                                    ->label(trans('filament-media-manager::messages.folders.columns.is_protected'))
                                    ->live()
                                    ->columnSpanFull(),
                                Forms\Components\TextInput::make('password')
                                    ->label(trans('filament-media-manager::messages.folders.columns.password'))
                                    ->hidden(fn(Forms\Get $get) => !$get('is_protected'))
                                    ->confirmed()
                                    ->password()
                                    ->revealable()
                                    ->required()
                                    ->maxLength(255),
                                Forms\Components\TextInput::make('password_confirmation')
                                    ->label(trans('filament-media-manager::messages.folders.columns.password_confirmation'))
                                    ->hidden(fn(Forms\Get $get) => !$get('is_protected'))
                                    ->password()
                                    ->required()
                                    ->revealable()
                                    ->maxLength(255),
                            ])
                    ];
                })
                ->fillForm($form)
                ->action(function (array $data) use ($folder_id){
                    $folder = config('filament-media-manager.model.folder')::find($folder_id);
                    $folder->update($data);

                    Notification::make()->title(trans('filament-media-manager::messages.media.notificaitons.edit-folder'))->send();
                })
        ];
    }

    public function folderAction(?Folder $item=null){
        return Actions\Action::make('folderAction')
            ->requiresConfirmation(function (array $arguments){
                if($arguments['record']['is_protected']){
                    return true;
                }
                else {
                    return false;
                }
            })
            ->form(function (array $arguments){
                if($arguments['record']['is_protected']){
                    return [
                        TextInput::make('password')
                            ->password()
                            ->revealable()
                            ->required()
                            ->maxLength(255),
                    ];
                }
                else {
                    return null;
                }
            })
            ->action(function (array $arguments, array $data){
                if($arguments['record']['is_protected']){
                    if($arguments['record']['password'] != $data['password']){
                        Notification::make()
                            ->title('Password is incorrect')
                            ->danger()
                            ->send();

                        return ;
                    }
                    else {
                        session()->put('folder_password', $data['password']);
                    }
                }
                if(!$arguments['record']['model_type']){
                    if(filament()->getTenant()){
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/media?folder_id='.$arguments['record']['id']));
                    }
                    else {
                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.media.index', ['folder_id' => $arguments['record']['id']]);
                    }
                }
                if(!$arguments['record']['model_id'] && !$arguments['record']['collection']){
                    if(filament()->getTenant()){
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/folders?model_type='.$arguments['record']['model_type']));
                    }
                    else {
                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.folders.index', ['model_type' => $arguments['record']['model_type']]);
                    }
                }
                else if(!$arguments['record']['model_id']){
                    if(filament()->getTenant()){
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/folders?model_type='.$arguments['record']['model_type'].'&collection='.$arguments['record']['collection']));
                    }
                    else {
                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.folders.index', ['model_type' => $arguments['record']['model_type'], 'collection' => $arguments['record']['collection']]);
                    }
                }
                else {
                    if(filament()->getTenant()) {
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/media?folder_id='.$arguments['record']['id']));
                    }
                    else {
                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.media.index', ['folder_id' => $arguments['record']['id']]);
                    }
                }
            })
            ->view('filament-media-manager::pages.folder-action', ['item' => $item]);
    }


    public function deleteMedia()
    {
        return Actions\Action::make('deleteMedia')
            ->label(trans('filament-media-manager::messages.media.meta.delete-media'))
            ->icon('heroicon-s-trash')
            ->color('danger')
            ->requiresConfirmation()
            ->action(function (array $arguments) {
                $media = Media::find($arguments['record']['id']);
                $media->delete();

                Notification::make()
                    ->title(trans('filament-media-manager::messages.media.notificaitons.delete-folder'))
                    ->success()
                    ->send();
            });

    }
}
